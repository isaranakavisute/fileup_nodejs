generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model DailyUpload {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now()) // วันที่สำหรับการนับครั้งอัปโหลด
  userId  Int      @unique // รหัสผู้ใช้
  uploads Int      @default(0) // จำนวนครั้งอัปโหลดต่อวัน
  user    User     @relation(fields: [userId], references: [id])
}

model DigitalAsset {
  id           Int       @id @default(autoincrement())
  title        String // ชื่อไฟล์หรือชื่อที่กำหนด
  description  String? // คำอธิบายไฟล์
  fileUrl      String // พาธไฟล์
  fileType     String // ชนิดของไฟล์ เช่น jpg, png, pdf
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  uploadedById Int // เชื่อมโยงกับ User
  createdAt    DateTime? @default(now())
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String
  lastname      String?
  password      String
  username      String?
  point         Int            @default(0)
  mobilephone   String?
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
  subscription  Subscription?  @relation
  musicTracks   MusicTrack[]
  digitalAssets DigitalAsset[] // ความสัมพันธ์กับไฟล์ดิจิทัล
  wallet        Wallet?
  dailyUploads  DailyUpload[]
}

model Subscription {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  type      String
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Transaction {
  id            Int       @id @default(autoincrement())
  transactionId String    @unique // Transaction ID 
  amount        Float // จำนวนเงินที่ทำธุรกรรม
  type          String // ประเภทการทำธุรกรรม เช่น 'deposit', 'withdrawal', 'purchase'
  description   String?
  wallet        Wallet    @relation(fields: [walletId], references: [id])
  walletId      Int
  balanceBefore Float
  balanceAfter  Float
  createdAt     DateTime? @default(now())
}

model MusicTrack {
  id           Int       @id @default(autoincrement())
  title        String // ชื่อเพลง
  artist       String // ชื่อนักร้อง
  album        String? // ชื่ออัลบั้ม (ถ้ามี)
  genre        String // ประเภทเพลง
  duration     Int // ความยาวเพลง (หน่วยเป็นวินาที)
  fileUrl      String // พาธไฟล์เพลง
  fileType     String // ชนิดของไฟล์ เช่น mp3
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  uploadedById Int // เชื่อมโยงกับ User
  createdAt    DateTime? @default(now())
}

model Wallet {
  id           Int           @id @default(autoincrement())
  balance      Float // ยอดเงินในกระเป๋าเงิน
  user         User          @relation(fields: [userId], references: [id]) // เชื่อมโยงกับ User
  userId       Int           @unique // ใช้เพื่อระบุเจ้าของกระเป๋าเงิน
  transactions Transaction[] // บันทึกการทำธุรกรรม
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
}
