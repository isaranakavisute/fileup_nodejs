generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Bank {
  id        Int    @id @default(autoincrement())
  nameTh    String?
  nameEn    String?
  shortName String? @unique
  logo      String?
  status    Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[] 
}



model DailyUpload {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now()) // วันที่สำหรับการนับครั้งอัปโหลด
  userId  Int      @unique // รหัสผู้ใช้
  uploads Int      @default(0) // จำนวนครั้งอัปโหลดต่อวัน
  user    User     @relation(fields: [userId], references: [id])
}

model DigitalAsset {
  id           Int       @id @default(autoincrement())
  title        String // ชื่อไฟล์หรือชื่อที่กำหนด
  description  String? // คำอธิบายไฟล์
  fileUrl      String // พาธไฟล์
  fileType     String // ชนิดของไฟล์ เช่น jpg, png, pdf
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  uploadedById Int // เชื่อมโยงกับ User
  createdAt    DateTime? @default(now())
}



model MusicTrack {
  id           Int       @id @default(autoincrement())
  title        String // ชื่อเพลง
  artist       String // ชื่อนักร้อง
  album        String? // ชื่ออัลบั้ม (ถ้ามี)
  genre        String // ประเภทเพลง
  duration     Int // ความยาวเพลง (หน่วยเป็นวินาที)
  fileUrl      String // พาธไฟล์เพลง
  fileType     String // ชนิดของไฟล์ เช่น mp3
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  uploadedById Int // เชื่อมโยงกับ User
  createdAt    DateTime? @default(now())
}

model Package {
  id          Int       @id @default(autoincrement()) 
  name        String    @unique // กำหนดให้ฟิลด์ 'name' เป็นเอกลักษณ์
  description String?
  price       Float
  duration    Int
  dailyUpload Int?
  allUpload   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subscriptions Subscription[] // ความสัมพันธ์กับ Subscription
}



model Subscription {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  type      String
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  package   Package   @relation(fields: [packageId], references: [id]) // อ้างอิงแพ็กเกจ
  packageId Int
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}


model Transaction {
  id            Int       @id @default(autoincrement())
  transactionId String    @unique // Transaction ID 
  amount        Float // จำนวนเงินที่ทำธุรกรรม
  type          String // ประเภทการทำธุรกรรม เช่น 'deposit', 'withdrawal', 'purchase'
  description   String?
  wallet        Wallet    @relation(fields: [walletId], references: [id])
  walletId      Int
  balanceBefore Float?
  balanceAfter  Float?
  createdAt     DateTime? @default(now())
  webhookEvent  WebhookEvent[]
  status        TransactionStatus @default(PENDING) // เพิ่ม `status`
}


model User {
  id           Int    @id @default(autoincrement()) 
  email        String @unique
  name         String
  lastname     String?
  password     String
  username     String?
  point        Int    @default(0)
  mobilephone  String?
  omiseCustomerId String?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  bankAccount  String? // ฟิลด์เก็บเลขบัญชีธนาคาร
  bankAccountName  String? // ฟิลด์เก็บชื่อบัญชีธนาคาร
  bankId       Int?    // ฟิลด์สำหรับอ้างอิงธนาคาร
  bank         Bank?   @relation(fields: [bankId], references: [id]) // ความสัมพันธ์กับธนาคารผ่าน bankId
  subscription Subscription? 
  musicTracks  MusicTrack[]
  digitalAssets DigitalAsset[]
  wallet       Wallet?
  dailyUploads DailyUpload[]
}



model Wallet {
  id           Int           @id @default(autoincrement())
  balance      Float // ยอดเงินในกระเป๋าเงิน
  user         User          @relation(fields: [userId], references: [id]) // เชื่อมโยงกับ User
  userId       Int           @unique // ใช้เพื่อระบุเจ้าของกระเป๋าเงิน
  transactions Transaction[] // บันทึกการทำธุรกรรม
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?     @updatedAt
}

model WebhookEvent {
  id          Int       @id @default(autoincrement())
  eventId     String    @unique // เก็บ Event ID ที่เอกลักษณ์
  eventType   String    // ประเภทของเหตุการณ์
  receivedAt  DateTime  @default(now()) // เวลาที่รับ Webhook
  status      String    // สถานะการประมวลผล เช่น 'processed', 'pending', 'error'
  transaction Transaction? @relation(fields: [transactionId], references: [id]) // ความสัมพันธ์กับ Transaction ถ้ามี
  transactionId Int?    // Transaction ID ถ้ามี
  errorDetails String?  // รายละเอียดข้อผิดพลาด ถ้ามี
}

